package com.strivers.main;

import com.strivers.arrays.easy.*;

import javax.swing.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        int x = -121;
//        int[] arr = {1,2,3,4,5};
        int n = 9669;
        int [] num = {1,2,3};
        String s ="abcd";
        String t ="abcde";
        int[] num1 ={10,9,8,7};
        int[] num2 ={5,6,7,8};
//        int[] num1 ={1,2};
//        int[] num2 ={1,2,3};
        int q = ZerosLast.findContentChildren(num1,num2);
        System.out.println(q);
//        char c = ZerosLast.findTheDifference(s,t);
//        System.out.println(c);
//        List<List<Integer>> list = ZerosLast.subsets(num);
//        System.out.println(list);
//        int b = ZerosLast.maximum69Number(n);
        int[] nums= {1, 2, 2, 4, 3, 1, 4};
        String jewel = "bcd";
        String stones = "cba";
//        int i = ZerosLast.numJewelsInStones(jewel, stones);
//        String num = "6777133339";
//        String s = "Mr Ding";
//        int [][] matrix = {{1,3}};
        int[][] matrix = {{1,2,3}, {4,5,6},{7,8,9}};
        int target = 3;
//        List<Integer> b = ZerosLast.spiralOrder(matrix);
//                searchMatrix(matrix , target);
//        String i = ZerosLast.largestGoodInteger(num);
//                ZerosLast.reverseWords(s);
//        System.out.println(b);
        String  pattern = "abc";
//        String s = "bdbd";
//        String s = "()[]";
        String[] words = {"a","bb","acd","ace"};
//        String t = "ahbgdc";
//        int b = ZerosLast.firstUniqChar(s);
//        boolean b = ZerosLast.wordPattern(pattern , s);
//                ZerosLast.isValid(s);
//        int b =   ZerosLast.numMatchingSubseq(s,words);
//                ZerosLast.isSubsequence(s, t);
//        System.out.println(b);
//        int ans = ZerosLast.singleNumber(nums);
//        System.out.println(ans);
        int [] nums1 = {10, 2, 6, 3};
        int [] nums2 = {2 ,10 ,10, 8};
        int k = 15;
        int[] arr = {1,2,3};
        int[] score = {5,4,3,2,1};
//        String[] s = ZerosLast.findRelativeRanks(score);
//        System.out.println(Arrays.toString(s));
//        ZerosLast.duplicateZeros(arr);
//      ArrayList<Integer> union = ZerosLast.findUnion(nums1, nums2);
//      System.out.println(union);
//              ZerosLast.unionArray(nums1 ,nums2);
//        System.out.println(Arrays.toString(union));
//        ZerosLast.moveZeroes(nums);
//        removeDuplicates.rotateRight(nums, k);
//                rotate(nums, k);
//        removeDuplicates.rotateArray(nums, k);
//         int ans =      removeDuplicates.removeDuplicates(nums);
//        System.out.println(ans);
//        solution.reverse(arr,n);
//        String s = "hanzsnah";
//        boolean ans = solution.palindromeCheck(s);
//        System.out.println(ans);
//        String s =  "A man, a plan, a canal: Panama";
//        boolean ans = solution.isPalindrome(s);
//        boolean ans = solution.isPalindrome(x);
        //        int [] arr = {2,3,5,1,9};
//        int k = 10;
//        int ans = GFG_LongestSubarraySumK.longestSubarray(arr, k);
//      int ans =  LC_SingleNumber_136.singleNumber(arr);
//        int ans = LC_MaxConsecutiveOnes_485.findMaxConsecutiveOnes(arr);
//        int ans = LC_MissingNumber.missingNumber(arr);
//        System.out.println(ans);
//        int d = 2;
//        boolean ch = LC_CheckArrayIsSorted_1752.check(arr);
//        System.out.println(ch);
//        LeftRotate.left_Rotate(arr);
//        LeftRotate.right_Rotate(arr);
//        LeftRotate.left_Rotate_DPlace(arr,d);
//        LeftRotate.rotate(arr,d);
//        ZerosLast.moveAllZerosToLast(arr);
//        ZerosLast.optimalSolutinZerosToLast(arr);
//        int n = 10, m = 7;
//        int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
//        int arr2[] = {2, 3, 4, 4, 5, 11, 12};
//        ArrayList<Integer> Union  = GFG_FindUnion.findUnion(arr1, arr2, n, m);
//        System.out.println("Union of arr1 and arr2 is ");
//        for (int val: Union)
//            System.out.print(val+" ");
    }
}
